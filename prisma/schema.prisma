// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  online        Boolean @default(false)
  forgetpasswordtoken     String?
  verified_user   Boolean @default(false)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ActivateToken   ActivateToken[]
  Post          Post[]
  Comment       Comment[]
  like     Like[]
  Save      Save[]
  SharedTo    Share[] @relation("sharedto")
  SharedFrom  Share[] @relation("sharedFrom")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model ActivateToken {
  id  Int  @id @default(autoincrement())
  token String @unique
  activatedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId    String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TypePost {
  IMAGE
  VIDEO
  POST
}

model Post {
  id      String  @id @default(dbgenerated("concat('post_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  content  String?
  type    TypePost
  tags    String[]
  authorId    String
  author      User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Image         Image[]
  Video         Video[]
  Comment       Comment[]
  like     Like[]
  Save      Save[]
  Share     Share[]
}

model Image {
  id      String  @id @default(dbgenerated("concat('image_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  url     String
  description String?
  postId      String
  Post        Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Video {
  id      String  @id @default(dbgenerated("concat('video_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  url     String
  description String?
  postId      String
  Post        Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
    id      String  @id @default(dbgenerated("concat('comment_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
    content String
    createdAt DateTime @default(now())
    authorId String
    author  User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    postId  String
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    parentCommentId String?
    parentComment Comment? @relation("CommentToComment", fields: [parentCommentId], references: [id], onDelete: Cascade)
    replies  Comment[] @relation("CommentToComment")
    like     Like[]
}

model Like {
      id      String  @id @default(dbgenerated("concat('like_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
      createdAt   DateTime @default(now())
      userId      String
      user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
      postId  String
      post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
      commentId String?
      comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Save {
    id      String  @id @default(dbgenerated("concat('save_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
    createdAt   DateTime @default(now())
    userId      String
    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId  String
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Share {
      id      String  @id @default(dbgenerated("concat('share_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
      postId  String
      post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
      sharedToId  String
      sharedfromId  String
      sharedTo    User @relation("sharedto", fields: [sharedToId], references: [id], onDelete: Cascade)
      sharedFrom    User @relation("sharedFrom", fields: [sharedfromId], references: [id], onDelete: Cascade)
}